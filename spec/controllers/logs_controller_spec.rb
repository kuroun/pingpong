require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe LogsController, type: :controller do

  login_user
  # This should return the minimal set of attributes required to create a valid
  # Log. As you add validations to Log, be sure to
  # adjust the attributes here as well.
  before(:each) do
    User.create(:email => 'top_geek2@gmail.com',:password => '12345678', :score => 0)
  end

  let(:valid_attributes) {
    {
      player_one: User.where(:email => 'top_geek1@gmail.com').pluck(:id).first,
      player_two: User.where(:email => 'top_geek2@gmail.com').pluck(:id).first,
      played_date: '2017-04-14',
      player_one_score: 21,
      player_two_score: 2
    }
  }

  let(:invalid_attributes) {
    {
      player_one: 1,
      player_two: 2,
      played_date: '',
      player_one_score: 45,
      player_two_score: 45  
    }
    
  }

  describe "GET #index" do
    it "assigns all logs as @logs" do
      log = Log.create! valid_attributes
      get :index, params: {}
      expect(assigns(:logs)).to eq([log])
    end
  end

  describe "GET #new" do
    it "assigns a new log as @log" do
      get :new, params: {}
      expect(assigns(:log)).to be_a_new(Log)
    end
  end

  describe "POST #create" do
    context "with valid params" do
      it "creates a new Log" do
        expect {
          post :create, {log: valid_attributes}
        }.to change(Log, :count).by(1)
      end

      it "assigns a newly created log as @log" do
        post :create, {log: valid_attributes}
        expect(assigns(:log)).to be_a(Log)
        expect(assigns(:log)).to be_persisted
      end

      it "redirects to the created log" do
        post :create, {log: valid_attributes}
        expect(response).to redirect_to logs_path
      end
    end

    context "with invalid params" do
      it "assigns a newly created but unsaved log as @log" do
        post :create, {log: invalid_attributes}
        expect(assigns(:log)).to be_a_new(Log)
      end

      it "re-renders the 'new' template" do
        post :create, {log: invalid_attributes}
        expect(response).to render_template("new")
      end
    end
  end
  
end
